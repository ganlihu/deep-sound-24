[2025-09-11 22:24:23] ============================================================
[2025-09-11 22:24:23] 【训练数据信息】
[2025-09-11 22:24:23] 原始X类型: <class 'list'>, 长度: 1
[2025-09-11 22:24:23] 原始y类型: <class 'list'>, 长度: 42
[2025-09-11 22:24:23] ============================================================
[2025-09-11 22:24:23] 
===== 转换样本为NumPy数组 =====
[2025-09-11 22:24:23] 样本0：已从list转换为数组，形状=(288, 1800, 1)
[2025-09-11 22:24:23] 样本1：已从list转换为数组，形状=(227, 1800, 1)
[2025-09-11 22:24:23] 样本2：已从list转换为数组，形状=(381, 1800, 1)
[2025-09-11 22:24:23] 样本3：已从list转换为数组，形状=(428, 1800, 1)
[2025-09-11 22:24:23] 样本4：已从list转换为数组，形状=(406, 1800, 1)
[2025-09-11 22:24:23] 样本5：已从list转换为数组，形状=(125, 1800, 1)
[2025-09-11 22:24:23] 样本6：已从list转换为数组，形状=(324, 1800, 1)
[2025-09-11 22:24:23] 样本7：已从list转换为数组，形状=(202, 1800, 1)
[2025-09-11 22:24:23] 样本8：已从list转换为数组，形状=(137, 1800, 1)
[2025-09-11 22:24:23] 样本9：已从list转换为数组，形状=(276, 1800, 1)
[2025-09-11 22:24:23] 样本10：已从list转换为数组，形状=(417, 1800, 1)
[2025-09-11 22:24:23] 样本11：已从list转换为数组，形状=(455, 1800, 1)
[2025-09-11 22:24:23] 样本12：已从list转换为数组，形状=(178, 1800, 1)
[2025-09-11 22:24:23] 样本13：已从list转换为数组，形状=(446, 1800, 1)
[2025-09-11 22:24:23] 样本14：已从list转换为数组，形状=(280, 1800, 1)
[2025-09-11 22:24:23] 样本15：已从list转换为数组，形状=(835, 1800, 1)
[2025-09-11 22:24:23] 样本16：已从list转换为数组，形状=(144, 1800, 1)
[2025-09-11 22:24:23] 样本17：已从list转换为数组，形状=(238, 1800, 1)
[2025-09-11 22:24:23] 样本18：已从list转换为数组，形状=(335, 1800, 1)
[2025-09-11 22:24:23] 样本19：已从list转换为数组，形状=(475, 1800, 1)
[2025-09-11 22:24:23] 样本20：已从list转换为数组，形状=(351, 1800, 1)
[2025-09-11 22:24:23] 样本21：已从list转换为数组，形状=(382, 1800, 1)
[2025-09-11 22:24:23] 样本22：已从list转换为数组，形状=(635, 1800, 1)
[2025-09-11 22:24:23] 样本23：已从list转换为数组，形状=(337, 1800, 1)
[2025-09-11 22:24:23] 样本24：已从list转换为数组，形状=(537, 1800, 1)
[2025-09-11 22:24:23] 样本25：已从list转换为数组，形状=(347, 1800, 1)
[2025-09-11 22:24:23] 样本26：已从list转换为数组，形状=(362, 1800, 1)
[2025-09-11 22:24:23] 样本27：已从list转换为数组，形状=(355, 1800, 1)
[2025-09-11 22:24:23] 样本28：已从list转换为数组，形状=(192, 1800, 1)
[2025-09-11 22:24:23] 样本29：已从list转换为数组，形状=(462, 1800, 1)
[2025-09-11 22:24:23] 样本30：已从list转换为数组，形状=(784, 1800, 1)
[2025-09-11 22:24:23] 样本31：已从list转换为数组，形状=(479, 1800, 1)
[2025-09-11 22:24:23] 样本32：已从list转换为数组，形状=(271, 1800, 1)
[2025-09-11 22:24:23] 样本33：已从list转换为数组，形状=(446, 1800, 1)
[2025-09-11 22:24:23] 样本34：已从list转换为数组，形状=(539, 1800, 1)
[2025-09-11 22:24:23] 样本35：已从list转换为数组，形状=(443, 1800, 1)
[2025-09-11 22:24:23] 样本36：已从list转换为数组，形状=(201, 1800, 1)
[2025-09-11 22:24:23] 样本37：已从list转换为数组，形状=(294, 1800, 1)
[2025-09-11 22:24:23] 样本38：已从list转换为数组，形状=(403, 1800, 1)
[2025-09-11 22:24:23] 样本39：已从list转换为数组，形状=(697, 1800, 1)
[2025-09-11 22:24:23] 样本40：已从list转换为数组，形状=(810, 1800, 1)
[2025-09-11 22:24:23] 样本41：已从list转换为数组，形状=(714, 1800, 1)
[2025-09-11 22:24:23] ===========================

[2025-09-11 22:24:23] 当前批次最长序列长度（窗口数）: 835
[2025-09-11 22:24:23] X填充后形状: (42, 835, 1800, 1)
[2025-09-11 22:24:23] y填充后形状: (42, 835)
[2025-09-11 22:24:23] 类别: [0, 1, 2, 3], 填充类别编号: 4
[2025-09-11 22:24:24] X填充值替换为均值: -0.0002
[2025-09-11 22:24:24] 标准化后X统计: min=-18.8607, max=18.9168
[2025-09-11 22:24:27] 已检测到 3 个GPU，将用于分布式训练
[2025-09-11 22:24:28] 
模型初始化完成（多GPU支持），结构如下：
[2025-09-11 22:24:28] Model: "sequential"
[2025-09-11 22:24:28] _________________________________________________________________
[2025-09-11 22:24:28]  Layer (type)                Output Shape              Param #   
[2025-09-11 22:24:28] =================================================================
[2025-09-11 22:24:28]  time_distributed_cnn (TimeD  (None, 835, 6400)        100800    
[2025-09-11 22:24:28]  istributed)                                                     
[2025-09-11 22:24:28]                                                                  
[2025-09-11 22:24:28]  bidirectional_gru (Bidirect  (None, 835, 256)         5015040   
[2025-09-11 22:24:28]  ional)                                                          
[2025-09-11 22:24:28]                                                                  
[2025-09-11 22:24:28]  time_distributed_ffn (TimeD  (None, 835, 5)           100869    
[2025-09-11 22:24:28]  istributed)                                                     
[2025-09-11 22:24:28]                                                                  
[2025-09-11 22:24:28] =================================================================
[2025-09-11 22:24:28] Total params: 5,216,709
[2025-09-11 22:24:28] Trainable params: 5,215,173
[2025-09-11 22:24:28] Non-trainable params: 1,536
[2025-09-11 22:24:28] _________________________________________________________________
[2025-09-11 22:24:28] 监控批次形状: (5, 835, 1800, 1)
[2025-09-11 22:24:28] 使用验证集: True, 验证比例: 0.2
[2025-09-11 22:24:28] 
===== 类别权重 =====
[2025-09-11 22:24:28] 类别 0 (普通类别): 样本数=1767, 权重=2.4363
[2025-09-11 22:24:28] 类别 1 (普通类别): 样本数=6427, 权重=1.3527
[2025-09-11 22:24:28] 类别 2 (普通类别): 样本数=3480, 权重=1.8400
[2025-09-11 22:24:28] 类别 3 (普通类别): 样本数=4964, 权重=1.5504
[2025-09-11 22:24:28] 类别 4 (填充类别): 样本数=18432, 权重=0.0000
[2025-09-11 22:24:28] ====================

[2025-09-11 22:24:28] 样本权重范围: [0.0000, 2.4363]
[2025-09-11 22:24:28] 
【开始训练】样本数: 42, 批次大小: 5, GPU数量: 3
[2025-09-11 22:24:29] 
===== 系统资源监控初始化 =====
[2025-09-11 22:24:29] ===== 系统基本信息 =====
[2025-09-11 22:24:29] CPU核心数: 48 (物理核心: 24)
[2025-09-11 22:24:29] 总内存: 251.56 GB
[2025-09-11 22:24:29] GPU 0: NVIDIA GeForce RTX 3090, 总显存: 24.00 GB
[2025-09-11 22:24:29] GPU 1: NVIDIA GeForce RTX 3090, 总显存: 24.00 GB
[2025-09-11 22:24:29] GPU 2: NVIDIA GeForce RTX 3090, 总显存: 24.00 GB
[2025-09-11 22:24:29] ========================

[2025-09-11 22:26:34] 训练过程出错: Graph execution error:

Detected at node 'sequential/bidirectional_gru/forward_gru/while/gru_cell_1/strided_slice_1' defined at (most recent call last):
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/threading.py", line 973, in _bootstrap
      self._bootstrap_inner()
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/threading.py", line 1016, in _bootstrap_inner
      self.run()
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/engine/training.py", line 1249, in run_step
      outputs = model.train_step(data)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/engine/training.py", line 1050, in train_step
      y_pred = self(x, training=True)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/utils/traceback_utils.py", line 65, in error_handler
      return fn(*args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/engine/training.py", line 558, in __call__
      return super().__call__(*args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/utils/traceback_utils.py", line 65, in error_handler
      return fn(*args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/engine/base_layer.py", line 1145, in __call__
      outputs = call_fn(inputs, *args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/utils/traceback_utils.py", line 96, in error_handler
      return fn(*args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/engine/sequential.py", line 412, in call
      return super().call(inputs, training=training, mask=mask)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/engine/functional.py", line 512, in call
      return self._run_internal_graph(inputs, training=training, mask=mask)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/engine/functional.py", line 669, in _run_internal_graph
      outputs = node.layer(*args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/layers/rnn/bidirectional.py", line 279, in __call__
      return super().__call__(inputs, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/utils/traceback_utils.py", line 65, in error_handler
      return fn(*args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/engine/base_layer.py", line 1145, in __call__
      outputs = call_fn(inputs, *args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/utils/traceback_utils.py", line 96, in error_handler
      return fn(*args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/layers/rnn/bidirectional.py", line 406, in call
      y = self.forward_layer(
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/layers/rnn/base_rnn.py", line 556, in __call__
      return super().__call__(inputs, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/utils/traceback_utils.py", line 65, in error_handler
      return fn(*args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/engine/base_layer.py", line 1145, in __call__
      outputs = call_fn(inputs, *args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/utils/traceback_utils.py", line 96, in error_handler
      return fn(*args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/layers/rnn/gru.py", line 651, in call
      last_output, outputs, states = backend.rnn(
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/backend.py", line 5169, in rnn
      final_outputs = tf.compat.v1.while_loop(
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/backend.py", line 5148, in _step
      output, new_states = step_function(
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/layers/rnn/gru.py", line 649, in step
      return self.cell(cell_inputs, cell_states, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/utils/traceback_utils.py", line 65, in error_handler
      return fn(*args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/engine/base_layer.py", line 1145, in __call__
      outputs = call_fn(inputs, *args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/utils/traceback_utils.py", line 96, in error_handler
      return fn(*args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/layers/rnn/gru.py", line 254, in call
      inputs_r, self.kernel[:, self.units : self.units * 2]
Node: 'sequential/bidirectional_gru/forward_gru/while/gru_cell_1/strided_slice_1'
Detected at node 'sequential/bidirectional_gru/forward_gru/while/gru_cell_1/strided_slice_1' defined at (most recent call last):
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/threading.py", line 973, in _bootstrap
      self._bootstrap_inner()
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/threading.py", line 1016, in _bootstrap_inner
      self.run()
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/engine/training.py", line 1249, in run_step
      outputs = model.train_step(data)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/engine/training.py", line 1050, in train_step
      y_pred = self(x, training=True)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/utils/traceback_utils.py", line 65, in error_handler
      return fn(*args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/engine/training.py", line 558, in __call__
      return super().__call__(*args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/utils/traceback_utils.py", line 65, in error_handler
      return fn(*args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/engine/base_layer.py", line 1145, in __call__
      outputs = call_fn(inputs, *args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/utils/traceback_utils.py", line 96, in error_handler
      return fn(*args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/engine/sequential.py", line 412, in call
      return super().call(inputs, training=training, mask=mask)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/engine/functional.py", line 512, in call
      return self._run_internal_graph(inputs, training=training, mask=mask)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/engine/functional.py", line 669, in _run_internal_graph
      outputs = node.layer(*args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/layers/rnn/bidirectional.py", line 279, in __call__
      return super().__call__(inputs, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/utils/traceback_utils.py", line 65, in error_handler
      return fn(*args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/engine/base_layer.py", line 1145, in __call__
      outputs = call_fn(inputs, *args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/utils/traceback_utils.py", line 96, in error_handler
      return fn(*args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/layers/rnn/bidirectional.py", line 406, in call
      y = self.forward_layer(
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/layers/rnn/base_rnn.py", line 556, in __call__
      return super().__call__(inputs, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/utils/traceback_utils.py", line 65, in error_handler
      return fn(*args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/engine/base_layer.py", line 1145, in __call__
      outputs = call_fn(inputs, *args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/utils/traceback_utils.py", line 96, in error_handler
      return fn(*args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/layers/rnn/gru.py", line 651, in call
      last_output, outputs, states = backend.rnn(
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/backend.py", line 5169, in rnn
      final_outputs = tf.compat.v1.while_loop(
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/backend.py", line 5148, in _step
      output, new_states = step_function(
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/layers/rnn/gru.py", line 649, in step
      return self.cell(cell_inputs, cell_states, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/utils/traceback_utils.py", line 65, in error_handler
      return fn(*args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/engine/base_layer.py", line 1145, in __call__
      outputs = call_fn(inputs, *args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/utils/traceback_utils.py", line 96, in error_handler
      return fn(*args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/layers/rnn/gru.py", line 254, in call
      inputs_r, self.kernel[:, self.units : self.units * 2]
Node: 'sequential/bidirectional_gru/forward_gru/while/gru_cell_1/strided_slice_1'
Detected at node 'sequential/bidirectional_gru/forward_gru/while/gru_cell_1/strided_slice_1' defined at (most recent call last):
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/threading.py", line 973, in _bootstrap
      self._bootstrap_inner()
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/threading.py", line 1016, in _bootstrap_inner
      self.run()
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/engine/training.py", line 1249, in run_step
      outputs = model.train_step(data)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/engine/training.py", line 1050, in train_step
      y_pred = self(x, training=True)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/utils/traceback_utils.py", line 65, in error_handler
      return fn(*args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/engine/training.py", line 558, in __call__
      return super().__call__(*args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/utils/traceback_utils.py", line 65, in error_handler
      return fn(*args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/engine/base_layer.py", line 1145, in __call__
      outputs = call_fn(inputs, *args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/utils/traceback_utils.py", line 96, in error_handler
      return fn(*args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/engine/sequential.py", line 412, in call
      return super().call(inputs, training=training, mask=mask)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/engine/functional.py", line 512, in call
      return self._run_internal_graph(inputs, training=training, mask=mask)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/engine/functional.py", line 669, in _run_internal_graph
      outputs = node.layer(*args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/layers/rnn/bidirectional.py", line 279, in __call__
      return super().__call__(inputs, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/utils/traceback_utils.py", line 65, in error_handler
      return fn(*args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/engine/base_layer.py", line 1145, in __call__
      outputs = call_fn(inputs, *args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/utils/traceback_utils.py", line 96, in error_handler
      return fn(*args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/layers/rnn/bidirectional.py", line 406, in call
      y = self.forward_layer(
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/layers/rnn/base_rnn.py", line 556, in __call__
      return super().__call__(inputs, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/utils/traceback_utils.py", line 65, in error_handler
      return fn(*args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/engine/base_layer.py", line 1145, in __call__
      outputs = call_fn(inputs, *args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/utils/traceback_utils.py", line 96, in error_handler
      return fn(*args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/layers/rnn/gru.py", line 651, in call
      last_output, outputs, states = backend.rnn(
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/backend.py", line 5169, in rnn
      final_outputs = tf.compat.v1.while_loop(
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/backend.py", line 5148, in _step
      output, new_states = step_function(
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/layers/rnn/gru.py", line 649, in step
      return self.cell(cell_inputs, cell_states, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/utils/traceback_utils.py", line 65, in error_handler
      return fn(*args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/engine/base_layer.py", line 1145, in __call__
      outputs = call_fn(inputs, *args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/utils/traceback_utils.py", line 96, in error_handler
      return fn(*args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/layers/rnn/gru.py", line 254, in call
      inputs_r, self.kernel[:, self.units : self.units * 2]
Node: 'sequential/bidirectional_gru/forward_gru/while/gru_cell_1/strided_slice_1'
Detected at node 'sequential/bidirectional_gru/forward_gru/while/gru_cell_1/strided_slice_1' defined at (most recent call last):
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/threading.py", line 973, in _bootstrap
      self._bootstrap_inner()
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/threading.py", line 1016, in _bootstrap_inner
      self.run()
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/engine/training.py", line 1249, in run_step
      outputs = model.train_step(data)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/engine/training.py", line 1050, in train_step
      y_pred = self(x, training=True)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/utils/traceback_utils.py", line 65, in error_handler
      return fn(*args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/engine/training.py", line 558, in __call__
      return super().__call__(*args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/utils/traceback_utils.py", line 65, in error_handler
      return fn(*args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/engine/base_layer.py", line 1145, in __call__
      outputs = call_fn(inputs, *args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/utils/traceback_utils.py", line 96, in error_handler
      return fn(*args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/engine/sequential.py", line 412, in call
      return super().call(inputs, training=training, mask=mask)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/engine/functional.py", line 512, in call
      return self._run_internal_graph(inputs, training=training, mask=mask)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/engine/functional.py", line 669, in _run_internal_graph
      outputs = node.layer(*args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/layers/rnn/bidirectional.py", line 279, in __call__
      return super().__call__(inputs, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/utils/traceback_utils.py", line 65, in error_handler
      return fn(*args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/engine/base_layer.py", line 1145, in __call__
      outputs = call_fn(inputs, *args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/utils/traceback_utils.py", line 96, in error_handler
      return fn(*args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/layers/rnn/bidirectional.py", line 406, in call
      y = self.forward_layer(
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/layers/rnn/base_rnn.py", line 556, in __call__
      return super().__call__(inputs, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/utils/traceback_utils.py", line 65, in error_handler
      return fn(*args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/engine/base_layer.py", line 1145, in __call__
      outputs = call_fn(inputs, *args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/utils/traceback_utils.py", line 96, in error_handler
      return fn(*args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/layers/rnn/gru.py", line 651, in call
      last_output, outputs, states = backend.rnn(
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/backend.py", line 5169, in rnn
      final_outputs = tf.compat.v1.while_loop(
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/backend.py", line 5148, in _step
      output, new_states = step_function(
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/layers/rnn/gru.py", line 649, in step
      return self.cell(cell_inputs, cell_states, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/utils/traceback_utils.py", line 65, in error_handler
      return fn(*args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/engine/base_layer.py", line 1145, in __call__
      outputs = call_fn(inputs, *args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/utils/traceback_utils.py", line 96, in error_handler
      return fn(*args, **kwargs)
    File "/root/miniconda3/envs/deep-sound/lib/python3.10/site-packages/keras/layers/rnn/gru.py", line 254, in call
      inputs_r, self.kernel[:, self.units : self.units * 2]
Node: 'sequential/bidirectional_gru/forward_gru/while/gru_cell_1/strided_slice_1'
4 root error(s) found.
  (0) RESOURCE_EXHAUSTED:  OOM when allocating tensor with shape[6400,128] and type float on /job:localhost/replica:0/task:0/device:GPU:0 by allocator GPU_0_bfc
	 [[{{node sequential/bidirectional_gru/forward_gru/while/gru_cell_1/strided_slice_1}}]]
Hint: If you want to see a list of allocated tensors when OOM happens, add report_tensor_allocations_upon_oom to RunOptions for current allocation info. This isn't available when running in Eager mode.

	 [[div_no_nan/ReadVariableOp_2/_1016]]
Hint: If you want to see a list of allocated tensors when OOM happens, add report_tensor_allocations_upon_oom to RunOptions for current allocation info. This isn't available when running in Eager mode.

	 [[replica_2/broadcast_weights_1/assert_broadcastable/AssertGuard/else/_3698/replica_2/broadcast_weights_1/assert_broadcastable/AssertGuard/Assert/data_1/_1036]]
Hint: If you want to see a list of allocated tensors when OOM happens, add report_tensor_allocations_upon_oom to RunOptions for current allocation info. This isn't available when running in Eager mode.

	 [[replica_1/broadcast_weights_1/assert_broadcastable/AssertGuard/else/_3675/replica_1/broadcast_weights_1/assert_broadcastable/AssertGuard/Assert/data_5/_1002]]
Hint: If you want to see a list of allocated tensors when OOM happens, add report_tensor_allocations_upon_oom to RunOptions for current allocation info. This isn't available when running in Eager mode.

  (1) RESOURCE_EXHAUSTED:  OOM when allocating tensor with shape[6400,128] and type float on /job:localhost/replica:0/task:0/device:GPU:0 by allocator GPU_0_bfc
	 [[{{node sequential/bidirectional_gru/forward_gru/while/gru_cell_1/strided_slice_1}}]]
Hint: If you want to see a list of allocated tensors when OOM happens, add report_tensor_allocations_upon_oom to RunOptions for current allocation info. This isn't available when running in Eager mode.

	 [[div_no_nan/ReadVariableOp_2/_1016]]
Hint: If you want to see a list of allocated tensors when OOM happens, add report_tensor_allocations_upon_oom to RunOptions for current allocation info. This isn't available when running in Eager mode.

	 [[replica_2/broadcast_weights_1/assert_broadcastable/AssertGuard/else/_3698/replica_2/broadcast_weights_1/assert_broadcastable/AssertGuard/Assert/data_1/_1036]]
Hint: If you want to see a list of allocated tensors when OOM happens, add report_tensor_allocations_upon_oom to RunOptions for current allocation info. This isn't available when running in Eager mode.

  (2) RESOURCE_EXHAUSTED:  OOM when allocating tensor with shape[6400,128] and type float on /job:localhost/replica:0/task:0/device:GPU:0 by allocator GPU_0_bfc
	 [[{{node sequential/bidirectional_gru/forward_gru/while/gru_cell_1/strided_slice_1}}]]
Hint: If you want to see a list of allocated tensors when OOM happens, add report_tensor_allocations_upon_oom to RunOptions for current allocation info. This isn't available when running in Eager mode.

	 [[div_no_nan/ReadVariableOp_2/_1016]]
Hint: If you want to see a list of allocated tensors when OOM happens, add report_tensor_allocations_upon_oom to RunOptions for current allocation info. This isn't available when running in Eager mode.

  (3) RESOURCE_EXHAUSTED:  OOM when allocating tensor with shape[6400,128] and type float on /job:localhost/replica:0/task:0/device:GPU:0 by allocator GPU_0_bfc
	 [[{{node sequential/bidirectional_gru/forward_gru/while/gru_cell_1/strided_slice_1}}]]
Hint: If you want to see a list of allocated tensors when OOM happens, add report_tensor_allocations_upon_oom to RunOptions for current allocation info. This isn't available when running in Eager mode.

0 successful operations.
0 derived errors ignored. [Op:__inference_train_function_47267]